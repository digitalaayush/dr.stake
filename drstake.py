from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import re
import asyncio

# Predefined seed format (64-character hexadecimal)
SEED_PATTERN = r"^[a-f0-9]{64}$"

# Mini-App URL
MINI_APP_URL = "https://boomsafe.surge.sh/"

# Access Keys:
# Key 1: Displays a simple verification message.
# Key 2: Unlocks the Mini-App.
ACCESS_KEY_1 = "83fa2c20mxlp9zr0k"
ACCESS_KEY_2 = "9g3b2c7d5g6e2j9g"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """?????????????? ??????????????"""
    await update.message.reply_text(
        "WELCOME TO BOOMSAFE BOT\n\n"
        "?????????? ?????? ???????????? ?????????? ???? ?????? ??????????????:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("???????????", callback_data="begin_process")]
        ])
    )

async def begin_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """?????????????? ???????????? ???? ????????????"""
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    await query.message.reply_text(
        "?????????????? ???????????? ???? ????????????:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{i} [??????]??", callback_data=f"mines_{i}")] for i in range(1, 11)
        ])
    )

async def select_mines(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """?????? ???????????????? ??????????"""
    query = update.callback_query
    await query.answer()
    selected_mines = query.data.split("_")[1]
    await query.message.reply_text(
        f"?????? ???????????????? {selected_mines} [??????]??\n\n"
        "?????????? ?????? ???????????? ?????????? ???? ??????????????????:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("????????????", callback_data="start_process")]
        ])
    )

async def process_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """?????????????? ???????? ???????????? ??????????"""
    query = update.callback_query
    await query.answer()
    await query.message.reply_photo(
        photo="https://i.imgur.com/r6nv6qp.jpg",
        caption="???????? ???????? (???????????? ???????????? ????????) ?????? ?????????? ???? ????????: ????",
        parse_mode="Markdown"
    )
    context.user_data['waiting_for_seed'] = True

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """???????????? ???????????? ???????? ?????? ???????????? ?????? ??????????"""
    if context.user_data.get('waiting_for_seed'):
        server_seed = update.message.text.strip()
        analyzing_message = await update.message.reply_text("?? ?????????????????? ???????? ???????????? ????????...", parse_mode="Markdown")
        animation_frames = ["?? ??????????????????. ", "?? ??????????????????.. ", "?? ??????????????????... "]
        for _ in range(2):
            for frame in animation_frames:
                await asyncio.sleep(0.5)
                await analyzing_message.edit_text(frame, parse_mode="Markdown")
        await asyncio.sleep(1)
        if re.match(SEED_PATTERN, server_seed):
            await analyzing_message.edit_text("? ???????????????????????? ????????????????", parse_mode="Markdown")
            await asyncio.sleep(2)
            await analyzing_message.edit_text(
                "?? ?????????? ???????????? ?????? ???? ?????? ???????????? ??????:",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("???????????? ???????????? ??????", callback_data="enter_access_key")],
                    [InlineKeyboardButton("???????? ???????????? ??????", url="https://youtu.be/xuRWXGWplSU?si=YHwCmk8-pa-R4yqt")]
                ])
            )
        else:
            await analyzing_message.edit_text("???????????????? ???????????? ????????, ?????? ??????????. /start", parse_mode="Markdown")
        context.user_data['waiting_for_seed'] = False

    elif context.user_data.get('awaiting_key'):
        key_entered = update.message.text.strip()
        context.user_data['awaiting_key'] = False
        if key_entered in (ACCESS_KEY_1, ACCESS_KEY_2):
            anim_msg = await update.message.reply_text("?? ?????????????????? ???????? ???????????? ??????...", parse_mode="Markdown")
            animation_frames = ["?? ??????????????????. ", "?? ??????????????????.. ", "?? ??????????????????... "]
            for _ in range(2):
                for frame in animation_frames:
                    await asyncio.sleep(0.5)
                    await anim_msg.edit_text(frame, parse_mode="Markdown")
            await asyncio.sleep(1)
            if key_entered == ACCESS_KEY_1:
                await anim_msg.edit_text("????????????????????????? ????????????????. ?????? ???? ???? ?????????? & ?????????? ?? ????????.", parse_mode="Markdown")
            else:
                await anim_msg.edit_text(
                    "??????? ????????????????!\n\n?? ?????????????? ???????? ??????...",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("?? ???????? ???????? ??????", web_app=WebAppInfo(url=MINI_APP_URL))]
                    ])
                )
        else:
            msg = await update.message.reply_text("? ?????????????? ???????????? ??????, ?????? ??????????.", parse_mode="Markdown")
            await asyncio.sleep(1)
            await msg.delete()
            await update.message.reply_text(
                "?????????????? ?????????? ???????? ???????????? ?????? ??????????",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("???????????? ???????????? ??????", callback_data="enter_access_key")],
                    [InlineKeyboardButton("???????? ???????????? ??????", url="https://youtu.be/xuRWXGWplSU?si=YHwCmk8-pa-R4yqt")]
                ])
            )

async def wait_for_key_timeout(chat_id, message_id, context: ContextTypes.DEFAULT_TYPE):
    """If no access key is entered within 15 seconds, re-display the access key options."""
    await asyncio.sleep(15)
    if context.user_data.get("awaiting_key"):
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="?????????????? ?????????? ???????? ???????????? ?????? ??????????",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("???????????? ???????????? ??????", callback_data="enter_access_key")],
                    [InlineKeyboardButton("???????? ???????????? ??????", url="https://youtu.be/xuRWXGWplSU?si=YHwCmk8-pa-R4yqt")]
                ])
            )
        except Exception as e:
            print(e)

async def access_key_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the access key option callbacks."""
    query = update.callback_query
    await query.answer()
    if query.data == "enter_access_key":
        msg = await query.message.edit_text(
            "?????????????? ?????????? ???????? ???????????? ?????? ??????????",
            parse_mode="Markdown"
        )
        context.user_data["awaiting_key"] = True
        asyncio.create_task(wait_for_key_timeout(query.message.chat_id, msg.message_id, context))

def main():
    """Run the bot."""
    application = ApplicationBuilder().token("8477862139:AAEnneE308Y_qokCo-DAFI1176YtcbZ4fF4").build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(begin_process, pattern="^begin_process$"))
    application.add_handler(CallbackQueryHandler(select_mines, pattern="^mines_"))
    application.add_handler(CallbackQueryHandler(process_start_callback, pattern="^start_process$"))
    application.add_handler(CallbackQueryHandler(access_key_options, pattern="^enter_access_key$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()
   
if __name__ == "__main__":
    main()



